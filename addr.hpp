/* This file belongs to the LibM2 library (http://github.com/imermcmaps/LibM2)
 * Copyright (c) 2013, iMer (www.imer.cc)
 * All rights reserved.
 * Licensed under the BSD 3-clause license (http://opensource.org/licenses/BSD-3-Clause)
 */
#ifndef __LIBM2_ADDR_HPP
#define __LIBM2_ADDR_HPP
namespace libm2{
namespace Addr{
enum class misc{
    version=0x848C62A,
    get_global_time=0x81FB930,
    main=0x8233C40,
    interpret_command=0x80CCF80,
    locale_find=0x8163460,
};
enum class CHARACTER{
	GoHome = 0x80706B0, // CHARACTER::GoHome(void)
	GetStopTime = 0x806BDB0, // CHARACTER::GetStopTime(void)const
	SetNowWalking = 0x806FCE0, // CHARACTER::SetNowWalking(bool)
	SetRevive = 0x806C1A0, // CHARACTER::SetRevive(bool)
	MonsterChat = 0x8076540, // CHARACTER::MonsterChat(unsigned char)
	StateIdle = 0x80C9440, // CHARACTER::StateIdle(void)
	OpenMyShop = 0x807BF60, // CHARACTER::OpenMyShop(char  const*,SShopItemTable *,unsigned char)
	SetWarMap = 0x806DE20, // CHARACTER::SetWarMap(CWarMap *)
	GetAlignment = 0x8087760, // CHARACTER::GetAlignment(void)const
	SetRegen = 0x80705F0, // CHARACTER::SetRegen(regen *)
	GetMobDropItemVnum = 0x806B730, // CHARACTER::GetMobDropItemVnum(void)const
	RemoveSpecifyItem = 0x80966C0, // CHARACTER::RemoveSpecifyItem(unsigned int,unsigned int)
	Shoot = 0x808F790, // CHARACTER::Shoot(unsigned char)
	Damage = 0x808D630, // CHARACTER::Damage(CHARACTER*,int,EDamageType)
	SetSkillGroup = 0x80B2B60, // CHARACTER::SetSkillGroup(unsigned char)
	AttackedByPoison = 0x80B14D0, // CHARACTER::AttackedByPoison(CHARACTER*)
	CanUseSkill = 0x80B1E60, // CHARACTER::CanUseSkill(unsigned int)const
	SetValidComboInterval = 0x806C2A0, // CHARACTER::SetValidComboInterval(int)
	__StateIdle_Stone = 0x80C6680, // CHARACTER::__StateIdle_Stone(void)
	DistributeExp = 0x808AA30, // CHARACTER::DistributeExp(void)
	GetAID = 0x80932F0, // CHARACTER::GetAID(void)const
	SetLevel = 0x806E6D0, // CHARACTER::SetLevel(unsigned char)
	AutoGiveItem = 0x80961E0, // CHARACTER::AutoGiveItem(unsigned int,unsigned char,int,bool)
	IsRaceFlag = 0x806B690, // CHARACTER::IsRaceFlag(unsigned int)const
	__StateIdle_NPC = 0x80C8B80, // CHARACTER::__StateIdle_NPC(void)
	SetAttackMob = 0x80C6290, // CHARACTER::SetAttackMob(void)
	GetQuestFlag = 0x8070A70, // CHARACTER::GetQuestFlag(std::string  const&)const
	GetMall = 0x806BD20, // CHARACTER::GetMall(void)const
	SetShop = 0x806BA30, // CHARACTER::SetShop(CShop *)
	Disconnect = 0x807DF00, // CHARACTER::Disconnect(char  const*)
	PayRefineFee = 0x8079980, // CHARACTER::PayRefineFee(int)
	GetQuickslot = 0x80B0CC0, // CHARACTER::GetQuickslot(unsigned char,SQuickslot **)
	SetSafeboxSize = 0x8071CC0, // CHARACTER::SetSafeboxSize(int)
	BeginFight = 0x8088F70, // CHARACTER::BeginFight(CHARACTER*)
	IsMCOK = 0x806CC70, // CHARACTER::IsMCOK(CHARACTER::MONARCH_INDEX)const
	CanReceiveItem = 0x8099510, // CHARACTER::CanReceiveItem(CHARACTER*,CItem *)const
	GetRealAlignment = 0x8087790, // CHARACTER::GetRealAlignment(void)const
	MountVnum = 0x8078260, // CHARACTER::MountVnum(unsigned int)
	ClearSubSkill = 0x80B2F80, // CHARACTER::ClearSubSkill(void)
	SetDungeon = 0x806DEA0, // CHARACTER::SetDungeon(CDungeon *)
	GetMobDamageMultiply = 0x806C090, // CHARACTER::GetMobDamageMultiply(void)const
	CloseMall = 0x806F0D0, // CHARACTER::CloseMall(void)
	StateBattle = 0x80C7940, // CHARACTER::StateBattle(void)
	ComputePoints = 0x80776B0, // CHARACTER::ComputePoints(void)
	GetUsedSkillMasterType = 0x80B37E0, // CHARACTER::GetUsedSkillMasterType(unsigned int)
	PointsPacket = 0x806D230, // CHARACTER::PointsPacket(void)
	PullMonster = 0x808FED0, // CHARACTER::PullMonster(void)
	FindItemByID = 0x8095900, // CHARACTER::FindItemByID(unsigned int)const
	ProcessRecallItem = 0x80973E0, // CHARACTER::ProcessRecallItem(CItem *)
	BroadcastTargetPacket = 0x8072AB0, // CHARACTER::BroadcastTargetPacket(void)
	UseSilkBotaryReal = 0x80972C0, // CHARACTER::UseSilkBotaryReal(SPacketMyshopPricelistHeader  const*)
	SetSafeboxOpenPosition = 0x8071580, // CHARACTER::SetSafeboxOpenPosition(void)
	ClearTarget = 0x80731F0, // CHARACTER::ClearTarget(void)
	ExchangeStart = 0x81128F0, // CHARACTER::ExchangeStart(CHARACTER*)
	SendGuildName = 0x806D330, // CHARACTER::SendGuildName(CGuild *)
	GetMCL = 0x806BF90, // CHARACTER::GetMCL(CHARACTER::MONARCH_INDEX)const
	Dead = 0x808C5E0, // CHARACTER::Dead(CHARACTER*,bool)
	HorseSummon = 0x8094100, // CHARACTER::HorseSummon(bool,bool,unsigned int,char  const*)
	ResetPlayTime = 0x806C910, // CHARACTER::ResetPlayTime(unsigned int)
	IsEmptyItemGrid = 0x8094D00, // CHARACTER::IsEmptyItemGrid(unsigned char,unsigned char,int)const
	GetSkillMasterType = 0x80B1F30, // CHARACTER::GetSkillMasterType(unsigned int)const
	GetQuestNPC = 0x806F920, // CHARACTER::GetQuestNPC(void)const
	SetVictim = 0x8087C70, // CHARACTER::SetVictim(CHARACTER*)
	HasReviverInParty = 0x806F6E0, // CHARACTER::HasReviverInParty(void)const
	GetMCLTime = 0x806CB90, // CHARACTER::GetMCLTime(CHARACTER::MONARCH_INDEX)const
	RequestToParty = 0x80745F0, // CHARACTER::RequestToParty(CHARACTER*)
	StateFlagBase = 0x80C94E0, // CHARACTER::StateFlagBase(void)
	SetNoAttackShinsu = 0x80C6140, // CHARACTER::SetNoAttackShinsu(void)
	GetDungeonForce = 0x806DA80, // CHARACTER::GetDungeonForce(void)const
	SaveExitLocation = 0x80715D0, // CHARACTER::SaveExitLocation(void)
	SetWeddingMap = 0x806DDA0, // CHARACTER::SetWeddingMap(marriage::WeddingMap *)
	ChangeVictimByAggro = 0x8089750, // CHARACTER::ChangeVictimByAggro(int,CHARACTER*)
	SendEquipment = 0x80725C0, // CHARACTER::SendEquipment(CHARACTER*)
	SetPart = 0x806BAB0, // CHARACTER::SetPart(unsigned char,unsigned short)
	IsDead = 0x8087660, // CHARACTER::IsDead(void)const
	AssignTriggers = 0x81FADC0, // CHARACTER::AssignTriggers(SMobTable  const*)
	CountEmptyInventory = 0x8095D60, // CHARACTER::CountEmptyInventory(void)const
	SetNextStatePulse = 0x806FDC0, // CHARACTER::SetNextStatePulse(int)
	ResetMobSkillCooltime = 0x80B2030, // CHARACTER::ResetMobSkillCooltime(void)
	ReviveInvisible = 0x806DAD0, // CHARACTER::ReviveInvisible(int)
	CanDoCube = 0x8097DE0, // CHARACTER::CanDoCube(void)const
	IsGoodAffect = 0x8085550, // CHARACTER::IsGoodAffect(unsigned char)const
	GetMoveSpeed = 0x806E3C0, // CHARACTER::GetMoveSpeed(void)const
	IsNoAttackChunjo = 0x80C61E0, // CHARACTER::IsNoAttackChunjo(void)const
	OnClick = 0x80720F0, // CHARACTER::OnClick(CHARACTER*)
	UpdateStateMachine = 0x806D460, // CHARACTER::UpdateStateMachine(unsigned int)
	StateMove = 0x80C6EB0, // CHARACTER::StateMove(void)
	SetLastAttacked = 0x80876A0, // CHARACTER::SetLastAttacked(unsigned int)
	GetProtege = 0x8087720, // CHARACTER::GetProtege(void)const
	StopStaminaConsume = 0x8079A30, // CHARACTER::StopStaminaConsume(void)
	ComputePassiveSkill = 0x80B4840, // CHARACTER::ComputePassiveSkill(unsigned int)
	GetDistanceFromSafeboxOpen = 0x8073730, // CHARACTER::GetDistanceFromSafeboxOpen(void)const
	SetRefineNPC = 0x8094F20, // CHARACTER::SetRefineNPC(CHARACTER*)
	RemoveAffect__8598 = 0x8086260, // CHARACTER::RemoveAffect(unsigned int)
	SetWarpLocation = 0x806BCA0, // CHARACTER::SetWarpLocation(long,long,long)
	UseMobSkill = 0x80B9930, // CHARACTER::UseMobSkill(unsigned int)
	GiveGold = 0x8098D90, // CHARACTER::GiveGold(int)
	SetSyncOwner = 0x8073960, // CHARACTER::SetSyncOwner(CHARACTER*,bool)
	GetMoveMotionSpeed = 0x806E240, // CHARACTER::GetMoveMotionSpeed(void)const
	CHARACTER = 0x807EEB0, // CHARACTER::CHARACTER(void)
	GetSummonVnum = 0x806B770, // CHARACTER::GetSummonVnum(void)const
	OnMove = 0x806F420, // CHARACTER::OnMove(bool)
	StopStateMachine = 0x806F9C0, // CHARACTER::StopStateMachine(void)
	UseSkill = 0x80BEBB0, // CHARACTER::UseSkill(unsigned int,CHARACTER*,bool)
	GetMobRank = 0x806B870, // CHARACTER::GetMobRank(void)const
	CheckTarget = 0x8073450, // CHARACTER::CheckTarget(void)
	ApplyPoint = 0x8079B80, // CHARACTER::ApplyPoint(unsigned char,int)
	IsStun = 0x8087620, // CHARACTER::IsStun(void)const
	CannotMoveByAffect = 0x806DD60, // CHARACTER::CannotMoveByAffect(void)const
	DeathPenalty = 0x8088BE0, // CHARACTER::DeathPenalty(unsigned char)
	CanBeginFight = 0x8087DC0, // CHARACTER::CanBeginFight(void)const
	MotionPacketEncode = 0x806B9D0, // CHARACTER::MotionPacketEncode(unsigned char,CHARACTER*,packet_motion *)
	IsEquipUniqueGroup = 0x80956C0, // CHARACTER::IsEquipUniqueGroup(unsigned int)const
	WarpToPID = 0x8071900, // CHARACTER::WarpToPID(unsigned int)
	UnEquipSpecialRideUniqueItem = 0x8097180, // CHARACTER::UnEquipSpecialRideUniqueItem(void)
	SetQuestFlag = 0x806D9D0, // CHARACTER::SetQuestFlag(std::string  const&,int)
	SetItem = 0x8097800, // CHARACTER::SetItem(unsigned char,CItem *,bool)
	UpdateCharacter = 0x806C4B0, // CHARACTER::UpdateCharacter(unsigned int)
	FindAffect = 0x8085490, // CHARACTER::FindAffect(unsigned int,unsigned char)
	AggregateMonster = 0x8090440, // CHARACTER::AggregateMonster(void)
	ResetComboHackCount = 0x806C330, // CHARACTER::ResetComboHackCount(void)
	StartStateMachine = 0x806FA00, // CHARACTER::StartStateMachine(int)
	GetCharType = 0x806BBB0, // CHARACTER::GetCharType(void)const
	StopHackShieldCheckCycle = 0x82106E0, // CHARACTER::StopHackShieldCheckCycle(void)
	SendGuildName__2419 = 0x806D410, // CHARACTER::SendGuildName(unsigned int)
	IsLearnableSkill = 0x80B2690, // CHARACTER::IsLearnableSkill(unsigned int)const
	SpecificEffectPacket = 0x806F830, // CHARACTER::SpecificEffectPacket(char  const*)
	GetSkillPowerByLevel = 0x8070AC0, // CHARACTER::GetSkillPowerByLevel(int,bool)const
	SkillLearnWaitMoreTimeMessage = 0x80B23A0, // CHARACTER::SkillLearnWaitMoreTimeMessage(unsigned int)
	CloseSafebox = 0x806F160, // CHARACTER::CloseSafebox(void)
	LoadSafebox = 0x8070D90, // CHARACTER::LoadSafebox(int,unsigned int,int,SPlayerItem *)
	StartCheckSpeedHackEvent = 0x8074510, // CHARACTER::StartCheckSpeedHackEvent(void)
	PointChange = 0x8078380, // CHARACTER::PointChange(unsigned char,int,bool,bool)
	GiveRecallItem = 0x8095FC0, // CHARACTER::GiveRecallItem(CItem *)
	GetLastComboTime = 0x806C270, // CHARACTER::GetLastComboTime(void)const
	Motion = 0x806D610, // CHARACTER::Motion(unsigned char,CHARACTER*)
	OnIdle = 0x806BBE0, // CHARACTER::OnIdle(void)
	IsPartyJoinableMutableCondition = 0x806E0B0, // CHARACTER::IsPartyJoinableMutableCondition(CHARACTER*,CHARACTER*)
	StartHackShieldCheckCycle = 0x8210760, // CHARACTER::StartHackShieldCheckCycle(int)
	SetRefineMode = 0x8094F70, // CHARACTER::SetRefineMode(int)
	IsBerserk = 0x806C050, // CHARACTER::IsBerserk(void)const
	StopRiding = 0x80948D0, // CHARACTER::StopRiding(void)
	IsBerserker = 0x80C6000, // CHARACTER::IsBerserker(void)const
	Say = 0x80724E0, // CHARACTER::Say(std::string  const&)
	GetJob = 0x806E770, // CHARACTER::GetJob(void)const
	SetQuickslot = 0x80B0E60, // CHARACTER::SetQuickslot(unsigned char,SQuickslot &)
	IsStoneSkinner = 0x80C6040, // CHARACTER::IsStoneSkinner(void)const
	IsStaminaConsume = 0x806BD80, // CHARACTER::IsStaminaConsume(void)const
	PartyInvite = 0x8074810, // CHARACTER::PartyInvite(CHARACTER*)
	StartSaveEvent = 0x8075090, // CHARACTER::StartSaveEvent(void)
	UseArrow = 0x8087E30, // CHARACTER::UseArrow(CItem *,unsigned int)
	Save = 0x806EC30, // CHARACTER::Save(void)
	GetComboIndex = 0x806C300, // CHARACTER::GetComboIndex(void)const
	GetMobSize = 0x806B8B0, // CHARACTER::GetMobSize(void)const
	__StateIdle_Monster = 0x80C8420, // CHARACTER::__StateIdle_Monster(void)
	SkillLevelDown = 0x80B2D70, // CHARACTER::SkillLevelDown(unsigned int)
	SetRider = 0x8093CE0, // CHARACTER::SetRider(CHARACTER*)
	fishing_take = 0x806F2E0, // CHARACTER::fishing_take(void)
	AutoGiveItem__30228 = 0x8098090, // CHARACTER::AutoGiveItem(CItem *,bool)
	UseSilkBotary = 0x8097350, // CHARACTER::UseSilkBotary(void)
	CloseMyShop = 0x807AB90, // CHARACTER::CloseMyShop(void)
	IsImmune = 0x80B1260, // CHARACTER::IsImmune(unsigned int)
	GetMC = 0x806BF60, // CHARACTER::GetMC(CHARACTER::MONARCH_INDEX)const
	SetGuild = 0x806D7C0, // CHARACTER::SetGuild(CGuild *)
	GetRider = 0x8093D50, // CHARACTER::GetRider(void)const
	Sync = 0x806E430, // CHARACTER::Sync(long,long)
	EncodeRemovePacket = 0x806F620, // CHARACTER::EncodeRemovePacket(CEntity *)
	EffectPacket = 0x806F8C0, // CHARACTER::EffectPacket(int)
	ForgetMyAttacker = 0x808FCD0, // CHARACTER::ForgetMyAttacker(void)
	GetRaceNum = 0x806B5E0, // CHARACTER::GetRaceNum(void)const
	GetPart = 0x806BAF0, // CHARACTER::GetPart(unsigned char)const
	Sitdown = 0x8071D60, // CHARACTER::Sitdown(int)
	ResetSkill = 0x80B3600, // CHARACTER::ResetSkill(void)
	GetComboSequence = 0x806C210, // CHARACTER::GetComboSequence(void)const
	SaveAffect = 0x8085AD0, // CHARACTER::SaveAffect(void)
	SaveReal = 0x807DDD0, // CHARACTER::SaveReal(void)
	SendMovePacket = 0x806DB80, // CHARACTER::SendMovePacket(unsigned char,unsigned char,unsigned int,unsigned int,unsigned int,unsigned int,int)
	WarpSet = 0x806FED0, // CHARACTER::WarpSet(long,long,long)
	ChangeEmpire = 0x8093610, // CHARACTER::ChangeEmpire(unsigned char)
	ComputeCooltime = 0x80B2BD0, // CHARACTER::ComputeCooltime(int)
	RefineItem = 0x809B1F0, // CHARACTER::RefineItem(CItem *,CItem *)
	SwapQuickslot = 0x80B0D10, // CHARACTER::SwapQuickslot(unsigned char,unsigned char)
	UpdateAggrPointEx = 0x8089910, // CHARACTER::UpdateAggrPointEx(CHARACTER*,EDamageType,int,CHARACTER::TBattleInfo &)
	CreatePlayerProto = 0x807D690, // CHARACTER::CreatePlayerProto(SPlayerTable &)
	GetPremiumRemainSeconds = 0x806D5C0, // CHARACTER::GetPremiumRemainSeconds(unsigned char)const
	CanSummon = 0x806C870, // CHARACTER::CanSummon(int)
	DoRefine = 0x809C2B0, // CHARACTER::DoRefine(CItem *,bool)
	mining = 0x8074F00, // CHARACTER::mining(CHARACTER*)
	StopMuyeongEvent = 0x80B22D0, // CHARACTER::StopMuyeongEvent(void)
	ChangeSafeboxSize = 0x806F4E0, // CHARACTER::ChangeSafeboxSize(unsigned char)
	FlyTarget = 0x8089310, // CHARACTER::FlyTarget(unsigned int,long,long,unsigned char)
	CanDeposit = 0x806C620, // CHARACTER::CanDeposit(void)const
	SwapItem = 0x80969A0, // CHARACTER::SwapItem(unsigned char,unsigned char)
	IsDeathBlow = 0x806C9F0, // CHARACTER::IsDeathBlow(void)const
	StartDestroyWhenIdleEvent = 0x80753B0, // CHARACTER::StartDestroyWhenIdleEvent(void)
	StartWarpNPCEvent = 0x8074C80, // CHARACTER::StartWarpNPCEvent(void)
	DisableCooltime = 0x80B1C80, // CHARACTER::DisableCooltime(void)
	GetMonsterDrainSPPoint = 0x806B830, // CHARACTER::GetMonsterDrainSPPoint(void)const
	IsEquipUniqueItem = 0x8095740, // CHARACTER::IsEquipUniqueItem(unsigned int)const
	WarpEnd = 0x8071AA0, // CHARACTER::WarpEnd(void)
	ChatPacket = 0x806EC80, // CHARACTER::ChatPacket(unsigned char,char  const*,...)
	RefineInformation = 0x809A720, // CHARACTER::RefineInformation(unsigned char,unsigned char,int)
	CalculateMoveDuration = 0x8072E40, // CHARACTER::CalculateMoveDuration(void)
	ComputeRefineFee = 0x8070770, // CHARACTER::ComputeRefineFee(int,int)const
	GetArrowAndBow = 0x8087F20, // CHARACTER::GetArrowAndBow(CItem **,CItem **,int)
	CheckSkillHitCount = 0x80B3880, // CHARACTER::CheckSkillHitCount(unsigned char,VID)
	GetRefineGuild = 0x806D4D0, // CHARACTER::GetRefineGuild(void)const
	SetBerserk = 0x806C0E0, // CHARACTER::SetBerserk(bool)
	IsGM = 0x806BC50, // CHARACTER::IsGM(void)const
	UseItem = 0x80A8BE0, // CHARACTER::UseItem(unsigned char,int)
	UpdateAlignment = 0x8087B90, // CHARACTER::UpdateAlignment(int)
	StateFlag = 0x80C99E0, // CHARACTER::StateFlag(void)
	SendDamagePacket = 0x8087FE0, // CHARACTER::SendDamagePacket(CHARACTER*,int,unsigned char)
	ClearRefineMode = 0x8094FB0, // CHARACTER::ClearRefineMode(void)
	SkipComboAttackByTime = 0x806C820, // CHARACTER::SkipComboAttackByTime(int)
	GetPolymorphPoint = 0x8075900, // CHARACTER::GetPolymorphPoint(unsigned char)const
	GetVictim = 0x80878C0, // CHARACTER::GetVictim(void)const
	ReceiveItem = 0x809ADA0, // CHARACTER::ReceiveItem(CHARACTER*,CItem *)
	SetCoward = 0x80C5FD0, // CHARACTER::SetCoward(void)
	CanUseMobSkill = 0x80B2310, // CHARACTER::CanUseMobSkill(unsigned int)const
	IsReviver = 0x80C6100, // CHARACTER::IsReviver(void)const
	UpdatePacket = 0x806D680, // CHARACTER::UpdatePacket(void)
	SetPosition = 0x80702B0, // CHARACTER::SetPosition(int)
	IsHack = 0x806EE30, // CHARACTER::IsHack(bool,bool,int)
	IsRiding = 0x806C430, // CHARACTER::IsRiding(void)const
	ApplyMobAttribute = 0x80B1090, // CHARACTER::ApplyMobAttribute(SMobTable  const*)
	IsCoward = 0x80C5F90, // CHARACTER::IsCoward(void)const
	SetRealPoint = 0x806B990, // CHARACTER::SetRealPoint(unsigned char,int)
	ChangeSex = 0x806D130, // CHARACTER::ChangeSex(void)
	StartAffectEvent = 0x8085C40, // CHARACTER::StartAffectEvent(void)
	SetSkillNextReadTime = 0x80B1C00, // CHARACTER::SetSkillNextReadTime(unsigned int,int)
	SetLastComboTime = 0x806C240, // CHARACTER::SetLastComboTime(unsigned int)
	ComputeSkill = 0x80BA020, // CHARACTER::ComputeSkill(unsigned int,CHARACTER*,unsigned char)
	Stun = 0x8089D00, // CHARACTER::Stun(void)
	DistributeHP = 0x80876F0, // CHARACTER::DistributeHP(CHARACTER*)
	GetValidComboInterval = 0x806C2D0, // CHARACTER::GetValidComboInterval(void)const
	ItemProcess_Hair = 0x8095E50, // CHARACTER::ItemProcess_Hair(CItem *,int)
	FindSpecifyItem = 0x8095CC0, // CHARACTER::FindSpecifyItem(unsigned int)const
	CreateFly = 0x8087D50, // CHARACTER::CreateFly(unsigned char,CHARACTER*)
	IsRefineThroughGuild = 0x806D520, // CHARACTER::IsRefineThroughGuild(void)const
	IsChangeAttackPosition = 0x806CFF0, // CHARACTER::IsChangeAttackPosition(CHARACTER*)const
	ProcessAffect = 0x8086A30, // CHARACTER::ProcessAffect(void)
	GetMobBattleType = 0x806B8F0, // CHARACTER::GetMobBattleType(void)const
	GetMyHorseVnum = 0x8093ED0, // CHARACTER::GetMyHorseVnum(void)const
	MoveItem = 0x80986A0, // CHARACTER::MoveItem(unsigned char,unsigned char,unsigned char)
	SetExchange = 0x806BA80, // CHARACTER::SetExchange(CExchange *)
	IsRevive = 0x806C160, // CHARACTER::IsRevive(void)const
	SetPKMode = 0x80879D0, // CHARACTER::SetPKMode(unsigned char)
	LearnSkillByBook = 0x80B5DB0, // CHARACTER::LearnSkillByBook(unsigned int,unsigned char)
	AcceptToParty = 0x8071EB0, // CHARACTER::AcceptToParty(CHARACTER*)
	AttackedByFire = 0x80B1380, // CHARACTER::AttackedByFire(CHARACTER*,int,int)
	BuffOnAttr_RemoveBuffsFromItem = 0x8098C00, // CHARACTER::BuffOnAttr_RemoveBuffsFromItem(CItem *)
	SetQuestItemPtr = 0x806BE10, // CHARACTER::SetQuestItemPtr(CItem *)
	IsAggressive = 0x80C5F20, // CHARACTER::IsAggressive(void)const
	GetPKMode = 0x8087800, // CHARACTER::GetPKMode(void)const
	Move = 0x806F560, // CHARACTER::Move(long,long)
	SetStone = 0x8072840, // CHARACTER::SetStone(CHARACTER*)
	GetLimitPoint = 0x806CD90, // CHARACTER::GetLimitPoint(unsigned char)const
	ItemDropPenalty = 0x808AF70, // CHARACTER::ItemDropPenalty(CHARACTER*)
	GetMobTable = 0x806B660, // CHARACTER::GetMobTable(void)const
	IsGodSpeeder = 0x80C6080, // CHARACTER::IsGodSpeeder(void)const
	fishing = 0x8074D80, // CHARACTER::fishing(void)
	RemoveBadAffect = 0x80862F0, // CHARACTER::RemoveBadAffect(void)
	GetNextExp = 0x806C470, // CHARACTER::GetNextExp(void)const
	Create = 0x8073CD0, // CHARACTER::Create(char  const*,unsigned int,bool)
	ExitToSavedLocation = 0x8070220, // CHARACTER::ExitToSavedLocation(void)
	BuffOnAttr_AddBuffsFromItem = 0x80968A0, // CHARACTER::BuffOnAttr_AddBuffsFromItem(CItem *)
	MonsterLog = 0x806FAE0, // CHARACTER::MonsterLog(char  const*,...)
	GiveItemFromSpecialItemGroup = 0x8099C80, // CHARACTER::GiveItemFromSpecialItemGroup(unsigned int,std::vector<unsigned int,std::allocator<unsigned int>> &,std::vector<unsigned int,std::allocator<unsigned int>> &,std::vector&<CItem *,std::allocator<CItem>>,int &)
	QuerySafeboxSize = 0x8070820, // CHARACTER::QuerySafeboxSize(void)
	RemoveFire = 0x80B1190, // CHARACTER::RemoveFire(void)
	IncreaseChatCounter = 0x806C3C0, // CHARACTER::IncreaseChatCounter(void)
	UpdateAffect = 0x8086EE0, // CHARACTER::UpdateAffect(void)
	SetMC = 0x806C6C0, // CHARACTER::SetMC(CHARACTER::MONARCH_INDEX)
	ChainQuickslotItem = 0x80B0F60, // CHARACTER::ChainQuickslotItem(CItem *,unsigned char,unsigned char)
	GetQuestItemPtr = 0x806BE70, // CHARACTER::GetQuestItemPtr(void)const
	GetMobAttackRange = 0x806CF70, // CHARACTER::GetMobAttackRange(void)const
	DoRefineWithScroll = 0x809B470, // CHARACTER::DoRefineWithScroll(CItem *)
	DropItem = 0x8098270, // CHARACTER::DropItem(unsigned char,unsigned char)
	SendGreetMessage = 0x80827F0, // CHARACTER::SendGreetMessage(void)
	LoadAffect = 0x8086500, // CHARACTER::LoadAffect(unsigned int,TPacketAffectElement *)
	FindCharacterInView = 0x80729B0, // CHARACTER::FindCharacterInView(char  const*,bool)
	CanFight = 0x80875E0, // CHARACTER::CanFight(void)const
	__CHARACTER = 0x80806B0, // CHARACTER::~CHARACTER()
	IsAttackMob = 0x80C62C0, // CHARACTER::IsAttackMob(void)const
	RemoveGoodAffect = 0x8086380, // CHARACTER::RemoveGoodAffect(void)
	IsGodSpeed = 0x806C120, // CHARACTER::IsGodSpeed(void)const
	FlushDelayedSaveItem = 0x806EBD0, // CHARACTER::FlushDelayedSaveItem(void)
	ResetStopTime = 0x806C8D0, // CHARACTER::ResetStopTime(void)
	GetMarryPartner = 0x806BF00, // CHARACTER::GetMarryPartner(void)const
	SetRotationToXY = 0x806DC90, // CHARACTER::SetRotationToXY(long,long)
	GetSafeboxSize = 0x806BD50, // CHARACTER::GetSafeboxSize(void)const
	Goto = 0x8076C00, // CHARACTER::Goto(long,long)
	IsPartyJoinableCondition = 0x806E180, // CHARACTER::IsPartyJoinableCondition(CHARACTER*,CHARACTER*)
	SyncPacket = 0x806F750, // CHARACTER::SyncPacket(void)
	RewardGold = 0x80880A0, // CHARACTER::RewardGold(CHARACTER*)
	GetMobDamageMax = 0x806B700, // CHARACTER::GetMobDamageMax(void)const
	IncreaseComboHackCount = 0x80709A0, // CHARACTER::IncreaseComboHackCount(int)
	mining_take = 0x8075490, // CHARACTER::mining_take(void)
	StartRecoveryEvent = 0x8075270, // CHARACTER::StartRecoveryEvent(void)
	LoadMall = 0x8070B60, // CHARACTER::LoadMall(int,SPlayerItem *)
	DelQuickslot = 0x80B0DF0, // CHARACTER::DelQuickslot(unsigned char)
	ClearSync = 0x8073C50, // CHARACTER::ClearSync(void)
	GetChatCounter = 0x806C400, // CHARACTER::GetChatCounter(void)const
	GetNearestVictim = 0x8089BA0, // CHARACTER::GetNearestVictim(CHARACTER*)
	SetRace = 0x806D0C0, // CHARACTER::SetRace(unsigned char)
	IsAffectFlag = 0x8085500, // CHARACTER::IsAffectFlag(unsigned int)const
	CountSpecifyItem = 0x8095860, // CHARACTER::CountSpecifyItem(unsigned int)const
	SetMarryPartner = 0x806BF30, // CHARACTER::SetMarryPartner(CHARACTER*)
	CanUseHorseSkill = 0x8093D80, // CHARACTER::CanUseHorseSkill(void)
	Follow = 0x8076E90, // CHARACTER::Follow(CHARACTER*,float)
	AttractRanger = 0x8090200, // CHARACTER::AttractRanger(void)
	IsGuardNPC = 0x806BEA0, // CHARACTER::IsGuardNPC(void)const
	CowardEscape = 0x80C6390, // CHARACTER::CowardEscape(void)
	ClearQuestItemPtr = 0x806BE40, // CHARACTER::ClearQuestItemPtr(void)
	BuildUpdatePartyPacket = 0x8073500, // CHARACTER::BuildUpdatePartyPacket(packet_party_update &)
	SetAggressive = 0x80C5F60, // CHARACTER::SetAggressive(void)
	SendHorseInfo = 0x8093F40, // CHARACTER::SendHorseInfo(void)
	Return = 0x8076D50, // CHARACTER::Return(void)
	GetSkillNextReadTime = 0x80B1FC0, // CHARACTER::GetSkillNextReadTime(unsigned int)const
	GetChangeEmpireCount = 0x8093420, // CHARACTER::GetChangeEmpireCount(void)const
	ComputeSkillAtPosition = 0x80B6BC0, // CHARACTER::ComputeSkillAtPosition(unsigned int,pixel_position_s  const&,unsigned char)
	Stop = 0x806FE40, // CHARACTER::Stop(void)
	SetKillerMode = 0x8087A70, // CHARACTER::SetKillerMode(bool)
	GetPoint = 0x806CEC0, // CHARACTER::GetPoint(unsigned char)const
	ResetChatCounter = 0x806C390, // CHARACTER::ResetChatCounter(void)
	BeginStateEmpty = 0x806FCA0, // CHARACTER::BeginStateEmpty(void)
	UnequipItem = 0x80970B0, // CHARACTER::UnequipItem(CItem *)
	GiveRandomSkillBook = 0x806E800, // CHARACTER::GiveRandomSkillBook(void)
	SetChangeEmpireCount = 0x8093530, // CHARACTER::SetChangeEmpireCount(void)
	GetMarriageBonus = 0x8070910, // CHARACTER::GetMarriageBonus(unsigned int,bool)
	LearnGrandMasterSkill = 0x80B5470, // CHARACTER::LearnGrandMasterSkill(unsigned int)
	GetName = 0x806B560, // CHARACTER::GetName(void)const
	GetRealPoint = 0x806B960, // CHARACTER::GetRealPoint(unsigned char)const
	ClearAffect = 0x8085900, // CHARACTER::ClearAffect(bool)
	SkillLevelUp = 0x80B4AF0, // CHARACTER::SkillLevelUp(unsigned int,unsigned char)
	UseItemEx = 0x809CFD0, // CHARACTER::UseItemEx(CItem *,int)
	RefreshAffect = 0x8085BE0, // CHARACTER::RefreshAffect(void)
	ResetOneSkill = 0x80B2C20, // CHARACTER::ResetOneSkill(unsigned int)
	DetermineDropMetinStone = 0x806CA60, // CHARACTER::DetermineDropMetinStone(void)
	PartyInviteAccept = 0x8073DB0, // CHARACTER::PartyInviteAccept(CHARACTER*)
	GetEmptyInventory = 0x8094EB0, // CHARACTER::GetEmptyInventory(unsigned char)const
	GetItem = 0x8095800, // CHARACTER::GetItem(unsigned char)const
	GetChainLightningMaxCount = 0x80B28F0, // CHARACTER::GetChainLightningMaxCount(void)const
	ReqSafeboxLoad = 0x80737D0, // CHARACTER::ReqSafeboxLoad(char  const*)
	SetGodSpeed = 0x8073040, // CHARACTER::SetGodSpeed(bool)
	GetPolymorphPower = 0x8075700, // CHARACTER::GetPolymorphPower(void)const
	UpdateAggrPoint = 0x8089AB0, // CHARACTER::UpdateAggrPoint(CHARACTER*,EDamageType,int)
	SetAffectedEunhyung = 0x80B2A80, // CHARACTER::SetAffectedEunhyung(void)
	EndStateEmpty = 0x8082BD0, // CHARACTER::EndStateEmpty(void)
	SetEmpire = 0x806B630, // CHARACTER::SetEmpire(unsigned char)
	IsSiegeNPC = 0x80708B0, // CHARACTER::IsSiegeNPC(void)const
	GetWear = 0x8095660, // CHARACTER::GetWear(unsigned char)const
	HorseDie = 0x80947B0, // CHARACTER::HorseDie(void)
	DenyToParty = 0x8070480, // CHARACTER::DenyToParty(CHARACTER*)
	CheckMaximumPoints = 0x8079DF0, // CHARACTER::CheckMaximumPoints(void)
	DropGold = 0x8097E40, // CHARACTER::DropGold(int)
	Initialize = 0x807E540, // CHARACTER::Initialize(void)
	GetMobSkill = 0x80B1D40, // CHARACTER::GetMobSkill(unsigned int)const
	SetComboSequence = 0x806C1E0, // CHARACTER::SetComboSequence(unsigned char)
	SetGMLevel = 0x806DCF0, // CHARACTER::SetGMLevel(void)
	IsStaminaHalfConsume = 0x806DB40, // CHARACTER::IsStaminaHalfConsume(void)const
	SyncQuickslot = 0x80B0FE0, // CHARACTER::SyncQuickslot(unsigned char,unsigned char,unsigned char)
	IsNoAttackShinsu = 0x80C6170, // CHARACTER::IsNoAttackShinsu(void)const
	CanWarp = 0x8071E00, // CHARACTER::CanWarp(void)const
	ItemProcess_Polymorph = 0x8095290, // CHARACTER::ItemProcess_Polymorph(CItem *)
	EquipItem = 0x8096C20, // CHARACTER::EquipItem(CItem *)
	GetLeadershipSkillLevel = 0x806DA40, // CHARACTER::GetLeadershipSkillLevel(void)const
	Show = 0x806E9E0, // CHARACTER::Show(long,long,long,long,bool)
	IsNoAttackJinno = 0x80C6250, // CHARACTER::IsNoAttackJinno(void)const
	UpdateKillerMode = 0x8087B10, // CHARACTER::UpdateKillerMode(void)
	ClearSkill = 0x80B3760, // CHARACTER::ClearSkill(void)
	RemoveAffect = 0x8086140, // CHARACTER::RemoveAffect(CAffect *)
	StartMuyeongEvent = 0x80B3520, // CHARACTER::StartMuyeongEvent(void)
	StateHorse = 0x80C7580, // CHARACTER::StateHorse(void)
	SetSkillLevel = 0x80B27F0, // CHARACTER::SetSkillLevel(unsigned int,unsigned char)
	GetMotionMode = 0x806D930, // CHARACTER::GetMotionMode(void)const
	ClearHorseInfo = 0x8093DE0, // CHARACTER::ClearHorseInfo(void)
	Destroy = 0x807AC70, // CHARACTER::Destroy(void)
	GetPolymorphItemVnum = 0x806B7F0, // CHARACTER::GetPolymorphItemVnum(void)const
	StartStaminaConsume = 0x8079AC0, // CHARACTER::StartStaminaConsume(void)
	HasMobSkill = 0x80B1D00, // CHARACTER::HasMobSkill(void)const
	SetPolymorph = 0x807A9E0, // CHARACTER::SetPolymorph(unsigned int,bool)
	ComputeSkillPoints = 0x80B1C50, // CHARACTER::ComputeSkillPoints(void)
	IsDeathBlower = 0x80C60C0, // CHARACTER::IsDeathBlower(void)const
	GetGMLevel = 0x806BC10, // CHARACTER::GetGMLevel(void)const
	SkillLevelPacket = 0x80B2AD0, // CHARACTER::SkillLevelPacket(void)
	PartyJoin = 0x806F220, // CHARACTER::PartyJoin(CHARACTER*)
	PickupItem = 0x8098F40, // CHARACTER::PickupItem(unsigned int)
	StartRiding = 0x8094A60, // CHARACTER::StartRiding(void)
	ClearItem = 0x8097D40, // CHARACTER::ClearItem(void)
	CountMobSkill = 0x80B1CB0, // CHARACTER::CountMobSkill(void)const
	GetSafebox = 0x806BCF0, // CHARACTER::GetSafebox(void)const
	AutoRecoveryItemProcess = 0x8095980, // CHARACTER::AutoRecoveryItemProcess(EAffectTypes)
	SetQuestNPCID = 0x806BDE0, // CHARACTER::SetQuestNPCID(unsigned int)
	GetSkipComboAttackByTime = 0x806C360, // CHARACTER::GetSkipComboAttackByTime(void)const
	SetPoint = 0x8072FA0, // CHARACTER::SetPoint(unsigned char,int)
	ClearStone = 0x8073350, // CHARACTER::ClearStone(void)
	IsUsableSkillMotion = 0x80B3380, // CHARACTER::IsUsableSkillMotion(unsigned int)const
	IsSummonMonster = 0x806B7B0, // CHARACTER::IsSummonMonster(void)const
	AddAffect = 0x8085D50, // CHARACTER::AddAffect(unsigned int,unsigned char,long,unsigned int,long,long,bool,bool)
	PartyInviteDeny = 0x8074A90, // CHARACTER::PartyInviteDeny(unsigned int)
	ShowAlignment = 0x8087950, // CHARACTER::ShowAlignment(bool)
	GetMobDamageMin = 0x806B6D0, // CHARACTER::GetMobDamageMin(void)const
	GiveItem = 0x809B140, // CHARACTER::GiveItem(CHARACTER*,unsigned char)
	SetNoAttackChunjo = 0x80C61B0, // CHARACTER::SetNoAttackChunjo(void)
	SetHorseLevel = 0x8093E60, // CHARACTER::SetHorseLevel(int)
	ComputeBattlePoints = 0x807A330, // CHARACTER::ComputeBattlePoints(void)
	EncodeInsertPacket = 0x8070FB0, // CHARACTER::EncodeInsertPacket(CEntity *)
	Standup = 0x80703E0, // CHARACTER::Standup(void)
	GetSkillLevel = 0x80B25C0, // CHARACTER::GetSkillLevel(unsigned int)const
	SendMyShopPriceListCmd = 0x8097230, // CHARACTER::SendMyShopPriceListCmd(unsigned int,unsigned int)
	UpdateDepositPulse = 0x806C670, // CHARACTER::UpdateDepositPulse(void)
	ResetPoint = 0x807C740, // CHARACTER::ResetPoint(int)
	GetHPPct = 0x806C010, // CHARACTER::GetHPPct(void)const
	SetWear = 0x8097BA0, // CHARACTER::SetWear(unsigned char,CItem *)
	SetRotation = 0x806B930, // CHARACTER::SetRotation(float)
	RemovePoison = 0x80B1140, // CHARACTER::RemovePoison(void)
	IsSyncOwner = 0x806E1E0, // CHARACTER::IsSyncOwner(CHARACTER*)const
	SetTarget = 0x8072C20, // CHARACTER::SetTarget(CHARACTER*)
	ConfirmWithMsg = 0x806FA60, // CHARACTER::ConfirmWithMsg(char  const*,int,unsigned int)
	SetBlockMode = 0x8075AC0, // CHARACTER::SetBlockMode(unsigned char)
	Reward = 0x808B830, // CHARACTER::Reward(bool)
	GetAllowedGold = 0x8070660, // CHARACTER::GetAllowedGold(void)const
	CanHandleItem = 0x8094C90, // CHARACTER::CanHandleItem(bool,bool)
	mining_cancel = 0x806F3A0, // CHARACTER::mining_cancel(void)
	Attack = 0x808F8A0, // CHARACTER::Attack(CHARACTER*,unsigned char)
	BuffOnAttr_ValueChange = 0x8099980, // CHARACTER::BuffOnAttr_ValueChange(unsigned char,unsigned char,unsigned char)
	GetSkillPower = 0x80B2940, // CHARACTER::GetSkillPower(unsigned int,unsigned char)const
	ReviveHorse = 0x8094700, // CHARACTER::ReviveHorse(void)
	SetBlockModeForce = 0x806F080, // CHARACTER::SetBlockModeForce(unsigned char)
	InitMC = 0x806C710, // CHARACTER::InitMC(void)
	ComputeAffect = 0x80855F0, // CHARACTER::ComputeAffect(CAffect *,bool)
	SetProto = 0x807CA60, // CHARACTER::SetProto(CMob  const*)
	SetParty = 0x806D820, // CHARACTER::SetParty(CParty *)
	GetOriginalPart = 0x806BB30, // CHARACTER::GetOriginalPart(unsigned char)const
	IsMonarch = 0x8070720, // CHARACTER::IsMonarch(void)const
	__OpenPrivateShop = 0x8095DD0, // CHARACTER::__OpenPrivateShop(void)
	DistributeSP = 0x8088FD0, // CHARACTER::DistributeSP(CHARACTER*,int)
	RestartAtSamePos = 0x80730C0, // CHARACTER::RestartAtSamePos(void)
	SetNoAttackJinno = 0x80C6220, // CHARACTER::SetNoAttackJinno(void)
	MainCharacterPacket = 0x8071620, // CHARACTER::MainCharacterPacket(void)
	IsKillerMode = 0x80877C0, // CHARACTER::IsKillerMode(void)const
	SetPlayerProto = 0x807D080, // CHARACTER::SetPlayerProto(SPlayerTable  const*)
	CanMove = 0x80705A0, // CHARACTER::CanMove(void)const
	ToggleMonsterLog = 0x806F960, // CHARACTER::ToggleMonsterLog(void)
};
enum class EVENT{
    intrusive_ptr_add_ref = 0x81107C0,
    intrusive_ptr_release = 0x81108B0,
};
enum class CEntity{
	UpdateSectree = 0x810FC60, // CEntity::UpdateSectree(void)
	ViewCleanup = 0x810FBB0, // CEntity::ViewCleanup(void)
	PacketAround = 0x810F510, // CEntity::PacketAround(void  const*,int,CEntity*)
	PacketView = 0x810F3F0, // CEntity::PacketView(void  const*,int,CEntity*)
	GetType = 0x810F050, // CEntity::GetType(void)const
	__CEntity = 0x810F290, // CEntity::~CEntity()
	ViewReencode = 0x810FAB0, // CEntity::ViewReencode(void)
	ViewRemove = 0x810F9E0, // CEntity::ViewRemove(CEntity*,bool)
	SetObserverMode = 0x810F0C0, // CEntity::SetObserverMode(bool)
	IsType = 0x810F080, // CEntity::IsType(int)const
	Initialize = 0x810F180, // CEntity::Initialize(int)
	Destroy = 0x810F140, // CEntity::Destroy(void)
	CEntity = 0x810F360, // CEntity::CEntity(void)
	ViewInsert = 0x810F910, // CEntity::ViewInsert(CEntity*,bool)
	SetType = 0x810F020, // CEntity::SetType(int)
};
enum class CInputMain{
    SyncPosition=0x8140870,
};
enum class CState {
	__CState = 0x8052600, // CState::~CState()
};
enum class CHorseRider {
	GetMyHorseVnum = 0x812DBD0, // CHorseRider::GetMyHorseVnum(void)const
	SetHorseData = 0x812CC70, // CHorseRider::SetHorseData(THorseInfo  const&)
	EnterHorse = 0x812D360, // CHorseRider::EnterHorse(void)
	ClearHorseInfo = 0x812DBA0, // CHorseRider::ClearHorseInfo(void)
	GetHorseGrade = 0x812D030, // CHorseRider::GetHorseGrade(void)
	Destroy = 0x812CEC0, // CHorseRider::Destroy(void)
	SendHorseInfo = 0x812DB70, // CHorseRider::SendHorseInfo(void)
	HorseDie = 0x812CE20, // CHorseRider::HorseDie(void)
	ReviveHorse = 0x812D2F0, // CHorseRider::ReviveHorse(void)
	UpdateHorseDataByLogoff = 0x812D080, // CHorseRider::UpdateHorseDataByLogoff(unsigned int)
	FeedHorse = 0x812D120, // CHorseRider::FeedHorse(void)
	SetHorseLevel = 0x812CFB0, // CHorseRider::SetHorseLevel(int)
	StartStaminaRegenEvent = 0x812D190, // CHorseRider::StartStaminaRegenEvent(void)
	StopRiding = 0x812D2B0, // CHorseRider::StopRiding(void)
	ResetHorseHealthDropTime = 0x812CF70, // CHorseRider::ResetHorseHealthDropTime(void)
	Initialize = 0x812DA00, // CHorseRider::Initialize(void)
	UpdateRideTime = 0x8082BA0, // CHorseRider::UpdateRideTime(int)
	__CHorseRider = 0x812D6B0, // CHorseRider::~CHorseRider()
	StartRiding = 0x812D4F0, // CHorseRider::StartRiding(void)
	UpdateHorseHealth = 0x812CCB0, // CHorseRider::UpdateHorseHealth(int,bool)
	StartStaminaConsumeEvent = 0x812D3D0, // CHorseRider::StartStaminaConsumeEvent(void)
	UpdateHorseStamina = 0x812CD70, // CHorseRider::UpdateHorseStamina(int,bool)
	CHorseRider = 0x812DAF0, // CHorseRider::CHorseRider(void)
	CheckHorseHealthDropTime = 0x812CF00, // CHorseRider::CheckHorseHealthDropTime(bool)
	GetHorseMaxStamina = 0x812CC30, // CHorseRider::GetHorseMaxStamina(void)
	GetHorseMaxHealth = 0x812D0E0, // CHorseRider::GetHorseMaxHealth(void)
};
enum class CHARACTER_MANAGER{
    Find__DWORD=0x80AA160,
    singleton=0x86A23EC,
    createCharacter_alloc=0x80AC5D6,
	CreateCharacter = 0x80AC5A0, // CHARACTER_MANAGER::CreateCharacter(char  const*,unsigned int)
	AllocVID = 0x80A9FB0, // CHARACTER_MANAGER::AllocVID(void)
	SpawnMobRange = 0x80AD190, // CHARACTER_MANAGER::SpawnMobRange(unsigned int,long,int,int,int,int,bool,bool,bool)
	DestroyCharacter = 0x80ABBF0, // CHARACTER_MANAGER::DestroyCharacter(CHARACTER *)
	KillLog = 0x80AA6A0, // CHARACTER_MANAGER::KillLog(unsigned int)
	Destroy = 0x80ABF90, // CHARACTER_MANAGER::Destroy(void)
	Find__1268 = 0x80AA1F0, // CHARACTER_MANAGER::Find(VID  const&)
	SpawnMoveGroup = 0x80AD730, // CHARACTER_MANAGER::SpawnMoveGroup(unsigned int,long,int,int,int,int,int,int,regen *,bool)
	CHARACTER_MANAGER = 0x80AB350, // CHARACTER_MANAGER::CHARACTER_MANAGER(void)
	Update = 0x80AE8E0, // CHARACTER_MANAGER::Update(int)
	SpawnMob = 0x80AC9E0, // CHARACTER_MANAGER::SpawnMob(unsigned int,long,long,long,long,bool,int,bool)
	RegisterRaceNum = 0x80AA330, // CHARACTER_MANAGER::RegisterRaceNum(unsigned int)
	GetMobItemRate = 0x80AA560, // CHARACTER_MANAGER::GetMobItemRate(CHARACTER *)
	BeginPendingDestroy = 0x80AA040, // CHARACTER_MANAGER::BeginPendingDestroy(void)
	PacketMonsterLog = 0x80AA830, // CHARACTER_MANAGER::PacketMonsterLog(CHARACTER *,void  const*,int)
	RegisterForMonsterLog = 0x80ABAC0, // CHARACTER_MANAGER::RegisterForMonsterLog(CHARACTER *)
	UnregisterRaceNumMap = 0x80AA2B0, // CHARACTER_MANAGER::UnregisterRaceNumMap(CHARACTER *)
	SelectStone = 0x80A9FE0, // CHARACTER_MANAGER::SelectStone(CHARACTER *)
	GetUserDamageRate = 0x80AA260, // CHARACTER_MANAGER::GetUserDamageRate(CHARACTER *)
	SpawnGroup = 0x80AD320, // CHARACTER_MANAGER::SpawnGroup(unsigned int,long,int,int,int,int,regen *,bool,CDungeon *)
	FindSpecifyPC = 0x80AAAD0, // CHARACTER_MANAGER::FindSpecifyPC(unsigned int,long,CHARACTER *,int,int)
	SpawnMobRandomPosition = 0x80ADA80, // CHARACTER_MANAGER::SpawnMobRandomPosition(unsigned int,long)
	FlushDelayedSave = 0x80AA9A0, // CHARACTER_MANAGER::FlushDelayedSave(CHARACTER *)
	GetMobExpRate = 0x80AA380, // CHARACTER_MANAGER::GetMobExpRate(CHARACTER *)
	__CHARACTER_MANAGER = 0x80AC200, // CHARACTER_MANAGER::~CHARACTER_MANAGER()
	SendScriptToMap = 0x80AACF0, // CHARACTER_MANAGER::SendScriptToMap(long,std::string  const&)
	RemoveFromStateList = 0x80AAA40, // CHARACTER_MANAGER::RemoveFromStateList(CHARACTER *)
	DelayedSave = 0x80ABB10, // CHARACTER_MANAGER::DelayedSave(CHARACTER *)
	GracefulShutdown = 0x80AA780, // CHARACTER_MANAGER::GracefulShutdown(void)
	GetCharactersByRaceNum = 0x80AE820, // CHARACTER_MANAGER::GetCharactersByRaceNum(unsigned int,CharacterVectorInteractor &)
	GetMobGoldDropRate = 0x80AA420, // CHARACTER_MANAGER::GetMobGoldDropRate(CHARACTER *)
	RegisterRaceNumMap = 0x80AB920, // CHARACTER_MANAGER::RegisterRaceNumMap(CHARACTER *)
	AddToStateList = 0x80ABB60, // CHARACTER_MANAGER::AddToStateList(CHARACTER *)
	FindByPID = 0x80AA610, // CHARACTER_MANAGER::FindByPID(unsigned int)
	UnregisterForMonsterLog = 0x80AA080, // CHARACTER_MANAGER::UnregisterForMonsterLog(CHARACTER *)
	FindPC = 0x80AB770, // CHARACTER_MANAGER::FindPC(char  const*)
	GetMobGoldAmountRate = 0x80AA4C0, // CHARACTER_MANAGER::GetMobGoldAmountRate(CHARACTER *)
	GetMobDamageRate = 0x80AA010, // CHARACTER_MANAGER::GetMobDamageRate(CHARACTER *)
	FlushPendingDestroy = 0x80ABEB0, // CHARACTER_MANAGER::FlushPendingDestroy(void)
	SpawnGroupGroup = 0x80AD630, // CHARACTER_MANAGER::SpawnGroupGroup(unsigned int,long,int,int,int,int,regen *,bool,CDungeon *)
	Find = 0x80AA160, // CHARACTER_MANAGER::Find(unsigned int)
	ProcessDelayedSave = 0x80AAC30, // CHARACTER_MANAGER::ProcessDelayedSave(void)
};
enum class lua{
    DoString=0x844CFE0,
    DoFile=0x844D2F0,

    ToString=0x8440110,
    ToBoolean=0x843F260,
    ToNumber=0x8440180,
    ToPointer=0x843F340,
    ToThread=0x843F310,
    ToUserData=0x843F2D0,

    PushBoolean=0x843F3F0,
    PushCClosure=0x843FBE0,
    PushFString=0x8440030,
    PushLightUserData=0x843F420,
    PushLString=0x843F9B0,
    PushNil=0x843F3B0,
    PushNumber=0x843F3D0,
    PushString=0x8440070,
    PushUpValues=0x843F710,
    PushValue=0x843F160,
    PushVFString=0x843FFE0,

    IsNumber=0x84401C0,
    IsString=0x843F200,

    SetTable=0x843FE40,
    NewTable=0x843FE90,
    GetTop=0x843F000,
    SetTop=0x843F020,
    RawSetI=0x843FD80,
    RawSet=0x843FDE0,
};
enum class CItem {
	SetAttribute = 0x8150B40, // CItem::SetAttribute(int,unsigned char,short)
	RemoveFromGround = 0x814F1C0, // CItem::RemoveFromGround(void)
	SetDestroyEvent = 0x814F320, // CItem::SetDestroyEvent(boost::intrusive_ptr<event>)
	AttrLog = 0x814DD60, // CItem::AttrLog(void)
	StartTimerBasedOnWearExpireEvent = 0x814E9A0, // CItem::StartTimerBasedOnWearExpireEvent(void)
	AlterToSocketItem = 0x814CB80, // CItem::AlterToSocketItem(int)
	StartRealTimeExpireEvent = 0x814E190, // CItem::StartRealTimeExpireEvent(void)
	Initialize = 0x8150090, // CItem::Initialize(void)
	IsPolymorphItem = 0x814CDB0, // CItem::IsPolymorphItem(void)
	SetOwnershipEvent = 0x814EFA0, // CItem::SetOwnershipEvent(boost::intrusive_ptr<event>)
	ClearMountAttributeAndAffect = 0x814BE20, // CItem::ClearMountAttributeAndAffect(void)
	SetForceAttribute = 0x8150D80, // CItem::SetForceAttribute(int,unsigned char,short)
	CanUsedBy = 0x814D200, // CItem::CanUsedBy(CHARACTER *)
	AddFlag = 0x814B8C0, // CItem::AddFlag(long)
	GetSpecialGroup = 0x814BCB0, // CItem::GetSpecialGroup(void)
	GetAccessorySocketGrade = 0x814BD70, // CItem::GetAccessorySocketGrade(void)
	RemoveAttributeType = 0x8150A10, // CItem::RemoveAttributeType(unsigned char)
	RemoveFlag = 0x814B890, // CItem::RemoveFlag(long)
	SetAccessorySocketGrade = 0x814CAE0, // CItem::SetAccessorySocketGrade(int)
	AddToGround = 0x814C6D0, // CItem::AddToGround(long,pixel_position_s  const&,bool)
	IsRamadanRing = 0x814CD00, // CItem::IsRamadanRing(void)
	GetRareAttrCount = 0x8150A70, // CItem::GetRareAttrCount(void)
	RemoveFromCharacter = 0x814FAE0, // CItem::RemoveFromCharacter(void)
	PutAttributeWithLevel = 0x8151530, // CItem::PutAttributeWithLevel(unsigned char)
	IsEquipable = 0x814CDF0, // CItem::IsEquipable(void)const
	CopyAttributeTo = 0x8150B00, // CItem::CopyAttributeTo(CItem*)
	GetRefineFromVnum = 0x814CD60, // CItem::GetRefineFromVnum(void)
	SetSockets = 0x814C010, // CItem::SetSockets(long  const*)
	GetAttributeSetIndex = 0x81507C0, // CItem::GetAttributeSetIndex(void)
	Destroy = 0x814CC10, // CItem::Destroy(void)
	Save = 0x814BFC0, // CItem::Save(void)
	SetUniqueExpireEvent = 0x814EBF0, // CItem::SetUniqueExpireEvent(boost::intrusive_ptr<event>)
	HasAttr = 0x8150870, // CItem::HasAttr(unsigned char)
	AccessorySocketDegrade = 0x814F710, // CItem::AccessorySocketDegrade(void)
	PutAttribute = 0x8151A20, // CItem::PutAttribute(int  const*)
	FindAttribute = 0x81509C0, // CItem::FindAttribute(unsigned char)
	CreateSocket = 0x814D160, // CItem::CreateSocket(unsigned char,unsigned char)
	SetAccessorySocketExpireEvent = 0x814F570, // CItem::SetAccessorySocketExpireEvent(boost::intrusive_ptr<event>)
	AddRareAttribute = 0x8151020, // CItem::AddRareAttribute(void)
	IsOwnership = 0x814D500, // CItem::IsOwnership(CHARACTER *)
	IsNewMountItem = 0x814CCB0, // CItem::IsNewMountItem(void)
	GetAccessorySocketMaxGrade = 0x814BD20, // CItem::GetAccessorySocketMaxGrade(void)
	AddSocket = 0x814B9B0, // CItem::AddSocket(void)
	GetCount = 0x814BF20, // CItem::GetCount(void)
	GetAccessorySocketDownGradeTime = 0x814BDC0, // CItem::GetAccessorySocketDownGradeTime(void)
	GetLevelLimit = 0x814BC60, // CItem::GetLevelLimit(void)
	StopTimerBasedOnWearExpireEvent = 0x814DFC0, // CItem::StopTimerBasedOnWearExpireEvent(void)
	SetCount = 0x814FBC0, // CItem::SetCount(unsigned int)
	EncodeRemovePacket = 0x814D470, // CItem::EncodeRemovePacket(CEntity *)
	SetAttributes = 0x8150AB0, // CItem::SetAttributes(TPlayerItemAttribute  const*)
	ChangeAttribute = 0x8151AF0, // CItem::ChangeAttribute(int  const*)
	GetValue = 0x814B8F0, // CItem::GetValue(unsigned int)
	SetAccessorySocketMaxGrade = 0x814CA70, // CItem::SetAccessorySocketMaxGrade(int)
	HasRareAttr = 0x81508E0, // CItem::HasRareAttr(unsigned char)
	SetExchanging = 0x814B920, // CItem::SetExchanging(bool)
	SetAccessorySocketDownGradeTime = 0x814C9C0, // CItem::SetAccessorySocketDownGradeTime(unsigned int)
	AddAttribute = 0x8150CC0, // CItem::AddAttribute(unsigned char,short)
	IsPCBangItem = 0x814BB00, // CItem::IsPCBangItem(void)
	EncodeInsertPacket = 0x814D670, // CItem::EncodeInsertPacket(CEntity *)
	StartDestroyEvent = 0x814F390, // CItem::StartDestroyEvent(int)
	ClearAttribute = 0x8150930, // CItem::ClearAttribute(void)
	DistanceValid = 0x814D5D0, // CItem::DistanceValid(CHARACTER *)
	SetOwnership = 0x814F010, // CItem::SetOwnership(CHARACTER *,int)
	ApplyAddon = 0x814BF80, // CItem::ApplyAddon(int)
	UsePacketEncode = 0x814D550, // CItem::UsePacketEncode(CHARACTER *,CHARACTER *,packet_item_use *)
	StopAccessorySocketExpireEvent = 0x814F820, // CItem::StopAccessorySocketExpireEvent(void)
	StopUniqueExpireEvent = 0x814E060, // CItem::StopUniqueExpireEvent(void)
	SetSocket = 0x814C910, // CItem::SetSocket(int,long,bool)
	IsAccessoryForSocket = 0x814BA50, // CItem::IsAccessoryForSocket(void)
	FindApplyValue = 0x814BBB0, // CItem::FindApplyValue(unsigned char)
	CanPutInto = 0x814CE40, // CItem::CanPutInto(CItem*)
	ModifyPoints = 0x814C060, // CItem::ModifyPoints(bool)
	AddAttr = 0x8150E60, // CItem::AddAttr(unsigned char,unsigned char)
	EquipTo = 0x814FD40, // CItem::EquipTo(CHARACTER *,unsigned char)
	ChangeRareAttribute = 0x8151420, // CItem::ChangeRareAttribute(void)
	CopySocketTo = 0x814BC20, // CItem::CopySocketTo(CItem*)
	SetProto = 0x814B850, // CItem::SetProto(SItemTable  const*)
	Unequip = 0x814F910, // CItem::Unequip(void)
	SetTimerBasedOnWearExpireEvent = 0x814E930, // CItem::SetTimerBasedOnWearExpireEvent(boost::intrusive_ptr<event>)
	GetShopBuyPrice = 0x814D330, // CItem::GetShopBuyPrice(void)
	CItem = 0x814E6D0, // CItem::CItem(void)
	AlterToMagicItem = 0x814CFF0, // CItem::AlterToMagicItem(void)
	GetGold = 0x814D360, // CItem::GetGold(void)
	FindEquipCell = 0x814D7A0, // CItem::FindEquipCell(CHARACTER *)
	GetAttributeCount = 0x8150980, // CItem::GetAttributeCount(void)
	GetRefineLevel = 0x814DEC0, // CItem::GetRefineLevel(void)
	CheckItemUseLevel = 0x814BB50, // CItem::CheckItemUseLevel(int)
	StartAccessorySocketExpireEvent = 0x814F5E0, // CItem::StartAccessorySocketExpireEvent(void)
	StartUniqueExpireEvent = 0x814EC60, // CItem::StartUniqueExpireEvent(void)
	IsRealTimeItem = 0x814BA00, // CItem::IsRealTimeItem(void)
	AddToCharacter = 0x814D3D0, // CItem::AddToCharacter(CHARACTER *,unsigned char,bool)
	UpdatePacket = 0x814C830, // CItem::UpdatePacket(void)
	IsRideItem = 0x814BAB0, // CItem::IsRideItem(void)
	GetSocketCount = 0x814B950, // CItem::GetSocketCount(void)
	OnAfterCreatedItem = 0x814E290, // CItem::OnAfterCreatedItem(void)
};
enum class CFSM {
	BeginStateInitial = 0x8052480, // CFSM::BeginStateInitial(void)
	IsState = 0x8052300, // CFSM::IsState(CState &)const
	Update = 0x8052290, // CFSM::Update(void)
	CFSM = 0x8052410, // CFSM::CFSM(void)
	StateInitial = 0x80524B0, // CFSM::StateInitial(void)
	__CFSM = 0x8052720, // CFSM::~CFSM()
	GotoState = 0x8052340, // CFSM::GotoState(CState &)
	EndStateInitial = 0x80524E0, // CFSM::EndStateInitial(void)
};
namespace quest{
    enum class misc{
        RegisterAffectFunctionTable=0x81956B0,
    };
    enum class CQuestManager{
        singleton = 0x86A23F0,
        AttrOut = 0x81C7220, // quest::CQuestManager::AttrOut(unsigned int,CHARACTER *,int)
        Reload = 0x81CCBE0, // quest::CQuestManager::Reload(void)
        ServerTimer = 0x81C74F0, // quest::CQuestManager::ServerTimer(unsigned int,unsigned int)
        GetEventFlag = 0x81C10C0, // quest::CQuestManager::GetEventFlag(std::string  const&)
        GetQuestIndexByName = 0x81C0F20, // quest::CQuestManager::GetQuestIndexByName(std::string  const&)
        LoadTimerScript = 0x81CD2A0, // quest::CQuestManager::LoadTimerScript(std::string  const&)
        CancelServerTimers = 0x81C0FC0, // quest::CQuestManager::CancelServerTimers(unsigned int)
        Confirm = 0x81C6480, // quest::CQuestManager::Confirm(unsigned int,quest::EQuestConfirmType,unsigned int)
        Input = 0x81C6340, // quest::CQuestManager::Input(unsigned int,char  const*)
        RequestSetEventFlag = 0x81C0770, // quest::CQuestManager::RequestSetEventFlag(std::string  const&,int)
        SendScript = 0x81C0D20, // quest::CQuestManager::SendScript(void)
        BroadcastEventFlagOnLogin = 0x81C26D0, // quest::CQuestManager::BroadcastEventFlagOnLogin(CHARACTER *)
        Login = 0x81C78C0, // quest::CQuestManager::Login(unsigned int,char  const*)
        EnterState = 0x81CBD10, // quest::CQuestManager::EnterState(unsigned int,unsigned int,int)
        QuestButton = 0x81C6F90, // quest::CQuestManager::QuestButton(unsigned int,unsigned int)
        OpenState = 0x8194530, // quest::CQuestManager::OpenState(std::string  const&,int)
        CloseState = 0x81910C0, // quest::CQuestManager::CloseState(quest::QuestState &)
        LoadStartQuest = 0x81C4460, // quest::CQuestManager::LoadStartQuest(std::string  const&,unsigned int)
        Destroy = 0x81C0250, // quest::CQuestManager::Destroy(void)
        LeaveState = 0x81C7A40, // quest::CQuestManager::LeaveState(unsigned int,unsigned int,int)
        GiveItemToPC = 0x81C6B10, // quest::CQuestManager::GiveItemToPC(unsigned int,CHARACTER *)
        Target = 0x81C7170, // quest::CQuestManager::Target(unsigned int,unsigned int,char  const*,char  const*)
        DisconnectPC = 0x81C0B50, // quest::CQuestManager::DisconnectPC(CHARACTER *)
        GotoConfirmState = 0x8192670, // quest::CQuestManager::GotoConfirmState(quest::QuestState &)
        GotoSelectState = 0x8192A90, // quest::CQuestManager::GotoSelectState(quest::QuestState &)
        LogoutPC = 0x81C7810, // quest::CQuestManager::LogoutPC(CHARACTER *)
        Resume = 0x81C60E0, // quest::CQuestManager::Resume(unsigned int)
        GotoInputState = 0x8194E90, // quest::CQuestManager::GotoInputState(quest::QuestState &)
        ClearServerTimer = 0x81C5740, // quest::CQuestManager::ClearServerTimer(std::string  const&,unsigned int)
        RunState = 0x8195210, // quest::CQuestManager::RunState(quest::QuestState &)
        GetQuestNameByIndex = 0x81C0290, // quest::CQuestManager::GetQuestNameByIndex(unsigned int)
        ClearScript = 0x81C0610, // quest::CQuestManager::ClearScript(void)
        GotoSelectItemState = 0x8195050, // quest::CQuestManager::GotoSelectItemState(quest::QuestState &)
        SetEventFlag = 0x81C2F60, // quest::CQuestManager::SetEventFlag(std::string  const&,int)
        WriteRunningStateToSyserr = 0x81C1C30, // quest::CQuestManager::WriteRunningStateToSyserr(void)
        GetCurrentNPCCharacterPtr = 0x81C03D0, // quest::CQuestManager::GetCurrentNPCCharacterPtr(void)
        AttrIn = 0x81C72E0, // quest::CQuestManager::AttrIn(unsigned int,CHARACTER *,int)
        Initialize = 0x81C7B00, // quest::CQuestManager::Initialize(void)
        Logout = 0x81C7770, // quest::CQuestManager::Logout(unsigned int)
        LevelUp = 0x81C73A0, // quest::CQuestManager::LevelUp(unsigned int)
        UseItem = 0x81C6D40, // quest::CQuestManager::UseItem(unsigned int,CItem *,bool)
        SetCurrentItem = 0x81C0420, // quest::CQuestManager::SetCurrentItem(CItem *)
        GetCurrentQuestName = 0x81C0390, // quest::CQuestManager::GetCurrentQuestName(void)
        GetCurrentItem = 0x81C0B00, // quest::CQuestManager::GetCurrentItem(void)
        GetQuestStateIndex = 0x81C07F0, // quest::CQuestManager::GetQuestStateIndex(std::string  const&,std::string  const&)
        BuildStateIndexToName = 0x8191230, // quest::CQuestManager::BuildStateIndexToName(char  const*)
        ClearCurrentItem = 0x81C0AB0, // quest::CQuestManager::ClearCurrentItem(void)
        AddServerTimer = 0x81C4CD0, // quest::CQuestManager::AddServerTimer(std::string  const&,unsigned int,boost::intrusive_ptr<event>)
        SIGUse = 0x81C6C00, // quest::CQuestManager::SIGUse(unsigned int,unsigned int,CItem *,bool)
        Click = 0x81C6860, // quest::CQuestManager::Click(unsigned int,CHARACTER *)
        GetQuestStateName = 0x81C04C0, // quest::CQuestManager::GetQuestStateName(std::string  const&,int)
        GotoEndState = 0x8194B10, // quest::CQuestManager::GotoEndState(quest::QuestState &)
        RegisterQuest = 0x81CA4E0, // quest::CQuestManager::RegisterQuest(std::string  const&,unsigned int)
        Timer = 0x81C7440, // quest::CQuestManager::Timer(unsigned int,unsigned int)
        GetServerTimerArg = 0x81C0160, // quest::CQuestManager::GetServerTimerArg(void)
        SelectDungeon = 0x81C0190, // quest::CQuestManager::SelectDungeon(CDungeon *)
        AddScript = 0x81C05D0, // quest::CQuestManager::AddScript(std::string  const&)
        GetCurrentDungeon = 0x81C0970, // quest::CQuestManager::GetCurrentDungeon(void)
        Letter = 0x81C7980, // quest::CQuestManager::Letter(unsigned int,unsigned int,int)
        InitializeLua = 0x8193200, // quest::CQuestManager::InitializeLua(void)
        SendEventFlagList = 0x81C0BA0, // quest::CQuestManager::SendEventFlagList(CHARACTER *)
        SelectItem = 0x81C6790, // quest::CQuestManager::SelectItem(unsigned int,unsigned int)
        SetSkinStyle = 0x81C00E0, // quest::CQuestManager::SetSkinStyle(int)
        CanStartQuest__8287 = 0x81C0730, // quest::CQuestManager::CanStartQuest(unsigned int,quest::PC  const&)
        TakeItem = 0x81C6E90, // quest::CQuestManager::TakeItem(unsigned int,unsigned int,CItem *)
        SetServerTimerArg = 0x81C0130, // quest::CQuestManager::SetServerTimerArg(unsigned int)
        GetPCForce = 0x81C5F20, // quest::CQuestManager::GetPCForce(unsigned int)
        CanEndQuestAtState = 0x81C00B0, // quest::CQuestManager::CanEndQuestAtState(std::string  const&,std::string  const&)
        FindNPCIDByName = 0x81C0F70, // quest::CQuestManager::FindNPCIDByName(std::string  const&)
        GetCurrentNPCRace = 0x81C0470, // quest::CQuestManager::GetCurrentNPCRace(void)
        QuestInfo = 0x81C7080, // quest::CQuestManager::QuestInfo(unsigned int,unsigned int)
        AddLuaFunctionTable = 0x8191390, // quest::CQuestManager::AddLuaFunctionTable(char  const*,luaL_reg *)
        CQuestManager = 0x81C1770, // quest::CQuestManager::CQuestManager(void)
        CanStartQuest = 0x81C0670, // quest::CQuestManager::CanStartQuest(unsigned int)
        GetPC = 0x81C6060, // quest::CQuestManager::GetPC(unsigned int)
        ClearServerTimerNotCancel = 0x81C5BD0, // quest::CQuestManager::ClearServerTimerNotCancel(std::string  const&,unsigned int)
        Kill = 0x81C75B0, // quest::CQuestManager::Kill(unsigned int,unsigned int)
        RegisterNPCVnum = 0x81CC570, // quest::CQuestManager::RegisterNPCVnum(unsigned int)
        QuestError = 0x81C09C0, // quest::CQuestManager::QuestError(char  const*,int,char  const*,...)
        GotoPauseState = 0x8194CD0, // quest::CQuestManager::GotoPauseState(quest::QuestState &)
        Unmount = 0x81CDB70, // quest::CQuestManager::Unmount(unsigned int)
        ExecuteQuestScript = 0x81C2630, // quest::CQuestManager::ExecuteQuestScript(quest::PC &,unsigned int,int,char  const*,int,std::vector<quest::AArgScript *,std::allocator<quest::AArgScript *>> *,bool)
        Select = 0x81C61B0, // quest::CQuestManager::Select(unsigned int,unsigned int)
        PickupItem = 0x81CC110, // quest::CQuestManager::PickupItem(unsigned int,CItem *)
    };
}
enum class DESC_MANAGER{
    singleton=0x86A36B4,
	SendClientPackageCryptKey = 0x80FF220, // DESC_MANAGER::SendClientPackageCryptKey(DESC *)
	FindByHandle = 0x80FE8D0, // DESC_MANAGER::FindByHandle(unsigned int)
	UpdateLocalUserCount = 0x80FF730, // DESC_MANAGER::UpdateLocalUserCount(void)
	AcceptP2PDesc = 0x80FF5F0, // DESC_MANAGER::AcceptP2PDesc(fdwatch *,int)
	Destroy = 0x80FFB00, // DESC_MANAGER::Destroy(void)
	__DESC_MANAGER = 0x8100DA0, // DESC_MANAGER::~DESC_MANAGER()
	ConnectAccount = 0x81011C0, // DESC_MANAGER::ConnectAccount(std::string  const&,DESC *)
	CreateLoginKey = 0x80FF040, // DESC_MANAGER::CreateLoginKey(DESC *)
	SendClientPackageSDBToLoadMap = 0x80FF4D0, // DESC_MANAGER::SendClientPackageSDBToLoadMap(DESC *,char  const*)
	FindByLoginKey = 0x80FED20, // DESC_MANAGER::FindByLoginKey(unsigned int)
	Initialize = 0x80FEAB0, // DESC_MANAGER::Initialize(void)
	DestroyDesc = 0x80FF330, // DESC_MANAGER::DestroyDesc(DESC *,bool)
	CreateConnectionDesc = 0x8100440, // DESC_MANAGER::CreateConnectionDesc(fdwatch *,char  const*,unsigned short,int,bool)
	FindByLoginName = 0x80FFAB0, // DESC_MANAGER::FindByLoginName(std::string  const&)
	TryConnect = 0x80FF420, // DESC_MANAGER::TryConnect(void)
	DisconnectAccount = 0x81013C0, // DESC_MANAGER::DisconnectAccount(std::string  const&)
	MakeRandomKey = 0x80FEA50, // DESC_MANAGER::MakeRandomKey(unsigned int)
	GetUserCount = 0x80FEC70, // DESC_MANAGER::GetUserCount(int &,int **,int &)
	DestroyClosed = 0x80FF990, // DESC_MANAGER::DestroyClosed(void)
	FindByHandshake = 0x80FF110, // DESC_MANAGER::FindByHandshake(unsigned int)
	LoadClientPackageCryptInfo = 0x80FE980, // DESC_MANAGER::LoadClientPackageCryptInfo(char  const*)
	AcceptDesc = 0x80FEE20, // DESC_MANAGER::AcceptDesc(fdwatch *,int)
	FindByCharacterName = 0x80FF8E0, // DESC_MANAGER::FindByCharacterName(char  const*)
	GetClientSet = 0x80FE8A0, // DESC_MANAGER::GetClientSet(void)
	IsP2PDescExist = 0x80FF160, // DESC_MANAGER::IsP2PDescExist(char  const*,unsigned short)
	DESC_MANAGER = 0x80FFD00, // DESC_MANAGER::DESC_MANAGER(void)
	CreateHandshake = 0x80FEB20, // DESC_MANAGER::CreateHandshake(void)
	ProcessExpiredLoginKey = 0x80FED80, // DESC_MANAGER::ProcessExpiredLoginKey(void)
};
}
}
#endif // __LIBM2_ADDR_HPP
